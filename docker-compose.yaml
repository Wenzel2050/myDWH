services:
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    env_file:
      - path: data/env/toda.env
        required: true
    volumes:
      - toda_db_data:/var/lib/postgresql/data
      - ./docker/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-socket-proxy:
    image: tecnativa/docker-socket-proxy:0.2.0
    environment:
      CONTAINERS: 1
      IMAGES: 1
      AUTH: 1
      POST: 1
    privileged: true
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  airflow-webserver:
    image: apache/airflow:2.9.3
    command: webserver
    env_file:
      - path: data/env/toda.env
        required: true
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      dwh-init:
        condition: service_completed_successfully
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - toda_sources_dags:/opt/airflow/dags
      - toda_airflow:/opt/airflow

  airflow-scheduler:
    image: apache/airflow:2.9.3
    command: scheduler
    env_file:
      - path: data/env/toda.env
        required: true
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      dwh-init:
        condition: service_completed_successfully
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - toda_sources_dags:/opt/airflow/dags
      - toda_airflow:/opt/airflow

  airflow-worker:
    image: apache/airflow:2.9.3
    command: celery worker
    env_file:
      - path: data/env/toda.env
        required: true
    environment:
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test: 
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      dwh-init:
        condition: service_completed_successfully
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - toda_sources_dags:/opt/airflow/dags
      - toda_airflow:/opt/airflow

  airflow-triggerer:
    image: apache/airflow:2.9.3
    command: triggerer
    env_file:
      - path: data/env/toda.env
        required: true
    environment:
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test: 
        - "CMD-SHELL"
        - 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      dwh-init:
        condition: service_completed_successfully
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - toda_sources_dags:/opt/airflow/dags
      - toda_airflow:/opt/airflow

  git-sync:
    image: toda-gitsync
    environment:
      GIT_SYNC_BRANCH: 'main'
      GIT_SYNC_REPO: ''
      GIT_SYNC_FORCE_ACCEPT_SSH_HOST_KEY: ''
      GIT_SYNC_FORCE_ACCEPT_SSH_PORT_KEY: ''

    volumes:
      - /root/.ssh/id_rsa

  netutils:
    image: dersimn/netutils
    command: sleep 1200 

  dwh-init:
    image: apache/airflow:2.9.3
    entrypoint: /bin/bash
    env_file:
      - path: data/env/toda.env
        required: true
    command:
      - -c
      - |
        mkdir -p /opt/airflow/logs /opt/airflow/plugins /opt/airflow/config
        chown -R "${AIRFLOW_UID:-50000}:0" /opt/airflow
        exec /entrypoint airflow version
    user: "0:0"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - toda_airflow:/opt/airflow

volumes:
  toda_sources_hop:
    external: true
  toda_sources_dags:
    external: true
  toda_sources_dbt:
    external: true
  toda_db_data:
    external: true
  toda_airflow:
    external: true

networks:
  default:
    name: toda-network
    external: true